domain ambulance {

    requirements = {
		continuous,
		constrained-state,
		integer-valued,
		reward-deterministic
	};
    
    types {
		ambulance   : object;
		node		: object;
		// x-coor	: object;
		// y-coor	: object;
    };
    
    pvariables {
		// Definitions
		HOSPITAL(node)	: { non-fluent, bool, default = false };

		// X-Y positions of the nodes
		// +'ve X is east, +'ve Y is north
		// X-COOR(node)	: { non-fluent, int, default = 0.0 }; ***only use these when assuming x-y coordinates of nodes***
		// Y-COOR(node)	: { non-fluent, int, default = 0.0 };

		// If the road network is not just rectangular
		// Connecting the nodes via roads
		connected(node, node)	: { non-fluent, bool, default = false };

		// Probability someone calls at a node
		CALL-PARAM(node)	: { non-fluent, real, default = 0.0 };

		// Penalty parameters
		// Note: a constant 1.0 penalty for person not serviced
		IN-PENALTY	: { non-fluent, real, default = 0.5 };

		// Person waiting states
		person-waiting-service(node)	: { state-fluent, bool, default = false };
		person-in-ambulance(ambulance)	: { state-fluent, bool, default = false };

		// Ambulance states
		// One person per ambulance max. Ambulance return straight to hospital upon servicing a call.
		// ambulance-free(ambulance)	: { state-fluent, bool, default = true }; ***repetitive pvariable; an ambulance is free if it is not loaded***
		// ambulance-loaded(ambulance)	: { state-fluent, bool, default = false }; ***repetitive pvariable; same as person-in-ambulance***
		ambulance-at-node(ambulance, node)	: { state-fluent, bool, default = false };

		// Actions:
		// ambulance-going-north(ambulance)	: { action-fluent, bool, default = false }; ***only use these when assuming x-y coordinates of nodes***
		// ambulance-going-south(ambulance)	: { action-fluent, bool, default = false };
		// ambulance-going-east(ambulance)	: { action-fluent, bool, default = false };
		// ambulance-going-west(ambulance)	: { action-fluent, bool, default = false };
		ambulance-moving(ambulance, node)	: {	action-fluent, bool, default = false };
		ambulance-loading(ambulance)	: {	action-fluent, bool, default = false };
		ambulance-unloading(ambulance)	: { action-fluent, bool, default = false };
    };
    
    cpfs {
		// A person is waiting service until an ambulance picks the person up
		// If no person is currently waiting, CALL-PARAM chance that a new person will call
		person-waiting-service'(?n) = 
			if (person-waiting-service(?n) ^ ~exists_{?a: ambulance} [ambulance-loading(?a) ^ ambulance-at-node(?a, ?n)])
				then KronDelta(true)
			else Bernoulli(CALL-PARAM(?n));

		// A person is still in ambulance until the ambulance unloads the person at the hospital
		// A person will be loaded to an ambulance when the ambulance arrived at the node it is serving
		person-in-ambulance'(?a) = 
			if (person-in-ambulance(?a))
				then KronDelta (~exists_{?n: node} [ambulance-at-node(?a, ?n) ^ HOSPITAL(?n) ^ ambulance-unloading(?a)])
			else KronDelta (exists_{?n: node} [ambulance-at-node(?a, ?n) ^ person-waiting-service(?n) ^ ambulance-loading(?a)]);

		// Ambulance movement
		// Note: if the ambulance should pause at a node, all actions of the ambulance are false
		ambulance-at-node'(?a, ?n) = 
			// If the ambulance is not moving
			if (ambulance-loading(?a) | ambulance-unloading(?a) | ~exists_{?next: node} ambulance-moving(?a, ?next))
				then KronDelta(ambulance-at-node(?a, ?n))
			// If the ambulance is moving to node ?n
			else if (exists_{?cur: node} [ambulance-at-node(?a, ?cur) ^ ambulance-moving(?a, ?n) ^ connected(?cur, ?n)])
				then KronDelta(true)
			// Fail handler
			else if (~exists_{?cur: node} [ambulance-at-node(?a, ?cur) ^ ambulance-moving(?a, ?n) ^ connected(?cur, ?n)])
				then KronDelta(ambulance-at-node(?a, ?n))
			// State persists
			else KronDelta(false);
    };
    
    reward = - sum_{?n: node} person-waiting-service(?n) + IN-PENALTY * sum_{?a: ambulance} person-in-ambulance(?a);
    
    state-action-constraints {
    // Ambulance can only unload at the hospital
    // Ambulance can only load when at a node that a person is currently waiting
    // Ambulance can only move to connected nodes
    // A person can only be in an ambulance iff the ambulance is loaded
    };
}
