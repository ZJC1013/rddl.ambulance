domain ambulance {

    requirements = {
		continuous,
		constrained-state,
		integer-valued,
		reward-deterministic
	};
    
    types {
		ambulance   : object;
		node		: object;
		// x-coor	: object;
		// y-coor	: object;
    };
    
    pvariables {
		// Definitions
		HOSPITAL(node)	: { non-fluent, bool, default = false };

<<<<<<< HEAD
		// X-Y positions of the nodes
		// +'ve X is east, +'ve Y is north
		X-COOR(node)	: { non-fluent, int, default = 0.0 };
		Y-COOR(node)	: { non-fluent, int, default = 0.0 };
=======
		// If the road network is not just rectangular
		// Connecting the nodes via roads
		distance(node, node)	: { non-fluent, real, default = 0.0 };
		connected(node, node)	: { non-fluent, bool, default = false };
>>>>>>> 1d9ed0623824beaa57a639b014491beb418edb11

		// Probability someone calls at a node
		CALL-PARAM(node)	: { non-fluent, real, default = 0.0 };

		// Penalty for person in ambulance
		// Note: a constant 1.0 penalty for person not serviced
		IN-PENALTY	: { non-fluent, real, default = 0.5 };

		// Person waiting states
		person-waiting-service(node)	: { state-fluent, bool, default = false };
		person-in-ambulance(ambulance)	: { state-fluent, bool, default = false };

		// Ambulance states
		// One person per ambulance max. Ambulance return straight to hospital upon servicing a call.
		ambulance-free(ambulance)	: { state-fluent, bool, default = true };
		ambulance-at-node(ambulance, node)	: { state-fluent, bool, default = false };
		ambulance-going-back(ambulance)	: { state-fluent, bool, default = false };
		ambulance-serving(ambulance, node):	{ state-fluent, bool, default = false };

		// Actions:
		ambulance-going-north(ambulance)	: { action-fluent, bool, default = false };
		ambulance-going-south(ambulance)	: { action-fluent, bool, default = false };
		ambulance-going-east(ambulance)	: { action-fluent, bool, default = false };
		ambulance-going-west(ambulance)	: { action-fluent, bool, default = false };
    };
    
    cpfs {     
		person-waiting-service'(?n) = 
			if (person-waiting-service(?n) ^ ~exists_{?a: ambulance} [ambulance-serving(?a, ?n) ^ ambulance-at-node(?a, ?n)])
			then KronDelta(true)
			else Bernoulli(CALL-PARAM(?n));

		// A person is still in ambulance until the ambulance arrived at the hospital
		// A person will enter an ambulance until the ambulance arrived at the node it is serving
		person-in-ambulance'(?a) = 
			if (person-in-ambulance(?a))
			then KronDelta (~exists_{?n: node} [ambulance-at-node(?a, ?n) ^ HOSPITAL(?n)])
			else KronDelta (~exists_{?n: node} [ambulance-at-node(?a, ?n) ^ ambulance-serving(?a, ?n) ^ person-waiting-service(?n)]);

		// An ambulance is free until it receive an order to serve a node
		// An ambulance becomes free when it drops off the person at the hospital
		ambulance-free'(?a) = 
			if (~ambulance-free(?a))
			then KronDelta (~exists_{?n: node} [ambulance-at-node(?a, ?n) ^ HOSPITAL(?n)])
			else KronDelta (~exists_{?n: node} ambulance-serving(?a, ?n));
    };
    
    reward = - sum_{?n: node} person-waiting-service(?n) + IN-PENALTY * sum{?a: ambulance} person-in-ambulance(?a);
    
    state-action-constraints {
    };
}
