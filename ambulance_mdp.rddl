domain ambulance {

    requirements = {
		continuous,
		constrained-state,
		reward-deterministic,
    };
    
    types {
		ambulance   : object;
		node		: object;
    };
    
    pvariables {
		// Definitions
		HOSPITAL(node)	: { non-fluent, bool, default = false };

		// Probability someone calls at a node
		CALL-PARAM(node)	: { non-fluent, real, default = 0.0 };

		// Penalty for person in ambulance
		// Note: a constant 1.0 penalty for person not serviced
		IN-PENALTY	: { non-fluent, real, default = 0.5 };

		// Person waiting states
		person-waiting-service(node)	: { state-fluent, bool, default = false };
		person-in-ambulance(ambulance)	: { state-fluent, bool, default = false };

		// Ambulance states
		ambulance-free(ambulance)	: { state-fluent, bool, default = true };
		ambulance-at-node(ambulance, node)	: { state-fluent, bool, default = false };

		// Actions:
		// One person per ambulance max. Ambulance return straight to hospital upon servicing a call.
		ambulance-going-back(ambulance)	: { action-fluent, bool, default = false };
		ambulance-serving(ambulance, node):	{ action-fluent, bool, default = false };
    };
    
    cpfs {
		// A person is still waiting for service unless the ambulance serving this call arrives
		// if no person currently waiting, Bernoulli(CALL-PARAN(?n)) chance of a new call
		person-waiting-service'(?n) = 
			if (person-waiting-service(?n) ^ ~exist_{?a: ambulance} [ambulance-serving(?a, ?n) ^ ambulance-at-node(?a, ?n)])
			then KronDelta(true)
			else Bernoulli(CALL-PARAM(?n));

		// A person is still in ambulance until the ambulance arrived at the hospital
		// A person will enter an ambulance until the ambulance arrived at the node it is serving
		person-in-ambulance'(?a) = 
			if (person-in-ambulance(?a))
			then KronDelta (~exist_{?n: node} [ambulance-at-node(?a, ?n) ^ HOSPITAL(?n)])
			else KronDelta (~exist_{?n: node} [ambulance-at-node(?a, ?n) ^ ambulance-serving(?a, ?n) ^ person-waiting-service(?n))
    };
    
    reward = - sum_{?p: person} [person-waiting-service(?n) + IN-PENALTY * person-in-ambulance(?a)];
    
    state-action-constraints {
    };
}
